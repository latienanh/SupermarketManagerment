// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Supermarket.Infrastructure;

#nullable disable

namespace Supermarket.Infrastructure.Migrations
{
    [DbContext(typeof(SuperMarketDbContext))]
    partial class SuperMarketDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ProductBatch", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("productId");

                    b.Property<Guid>("BatchId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("batchId");

                    b.HasKey("ProductId", "BatchId");

                    b.HasIndex("BatchId");

                    b.ToTable("ProductBatches", (string)null);
                });

            modelBuilder.Entity("ProductCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("productId");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("categoryId");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("productCategories", (string)null);
                });

            modelBuilder.Entity("ProductCoupon", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("productId");

                    b.Property<Guid>("CouponId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("couponId");

                    b.HasKey("ProductId", "CouponId");

                    b.HasIndex("CouponId");

                    b.ToTable("ProductCoupons", (string)null);
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.Common.Modification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Modifications");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Attribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("AttributeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("attributeName");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("date")
                        .HasColumnName("createTime");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("deleteBy");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDelete")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DeleteBy");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Batch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("batchNumber");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("date")
                        .HasColumnName("createTime");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("deleteBy");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("date")
                        .HasColumnName("expiryDate");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDelete")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ManufacturingDate")
                        .HasColumnType("date")
                        .HasColumnName("manufacturingDate");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DeleteBy");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("categoryName");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("date")
                        .HasColumnName("createTime");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("deleteBy");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDelete")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parentId");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DeleteBy");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Coupon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("code");

                    b.Property<string>("CouponDescripiton")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("couponDescripiton");

                    b.Property<DateTime?>("CouponEndDate")
                        .HasColumnType("date")
                        .HasColumnName("couponEndDate");

                    b.Property<DateTime?>("CouponStartDate")
                        .HasColumnType("date")
                        .HasColumnName("couponStartDate");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("date")
                        .HasColumnName("createTime");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("deleteBy");

                    b.Property<int?>("DiscountType")
                        .HasColumnType("int")
                        .HasColumnName("discountType");

                    b.Property<double?>("DiscountValue")
                        .HasColumnType("float")
                        .HasColumnName("discountValue");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDelete")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DeleteBy");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("date")
                        .HasColumnName("createTime");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("deleteBy");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("firstName");

                    b.Property<string>("FullName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(101)
                        .HasColumnType("nvarchar(101)")
                        .HasColumnName("fullName")
                        .HasComputedColumnSql("(([firstName]+' ')+[lastName])", false);

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDelete")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lastName");

                    b.Property<Guid?>("MembershipTypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("membershipTypeId");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("phoneNumber")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DeleteBy");

                    b.HasIndex("MembershipTypeId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Employee", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("firstName");

                    b.Property<string>("FullName")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(101)
                        .HasColumnType("nvarchar(101)")
                        .HasColumnName("fullName")
                        .HasComputedColumnSql("(([firstName]+' ')+[lastName])", false);

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lastName");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("date")
                        .HasColumnName("createTime");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customerID");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("deleteBy");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("date")
                        .HasColumnName("invoiceDate");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDelete")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("paymentMethod");

                    b.Property<int?>("PaymentStatus")
                        .HasColumnType("int")
                        .HasColumnName("paymentStatus");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float")
                        .HasColumnName("totalPrice");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeleteBy");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.InvoiceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("invoiceId");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProductId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("productId");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float")
                        .HasColumnName("totalPrice");

                    b.Property<double?>("UnitPrice")
                        .HasColumnType("float")
                        .HasColumnName("unitPrice");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DeleteBy");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.MemberShipType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DeleteBy");

                    b.ToTable("MemberShipTypes");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("BarCode")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("barCode")
                        .IsFixedLength();

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("date")
                        .HasColumnName("createTime");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("deleteBy");

                    b.Property<string>("Describe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDelete")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductImage")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("productImage");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("productName");

                    b.Property<string>("ProductSlug")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("productSlug");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DeleteBy");

                    b.HasIndex("ParentId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.StockIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("date")
                        .HasColumnName("createTime");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("deleteBy");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("date")
                        .HasColumnName("entryDate");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDelete")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("supplierId");

                    b.Property<double?>("TotalOrderValue")
                        .HasColumnType("float")
                        .HasColumnName("totalOrderValue");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DeleteBy");

                    b.HasIndex("SupplierId");

                    b.ToTable("StockIns");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.StockInDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<double?>("Price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("productId");

                    b.Property<int?>("QuantityReceived")
                        .HasColumnType("int")
                        .HasColumnName("quantityReceived");

                    b.Property<Guid?>("StockInId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("stockInId");

                    b.Property<double?>("TotalValueReceived")
                        .HasColumnType("float")
                        .HasColumnName("totalValueReceived");

                    b.Property<double?>("UnitPriceReceived")
                        .HasColumnType("float")
                        .HasColumnName("unitPriceReceived");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DeleteBy");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockInId");

                    b.ToTable("StockInDetails");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("date")
                        .HasColumnName("createTime");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("deleteBy");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDelete")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("phoneNumber")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DeleteBy");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.UnitConversion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("date")
                        .HasColumnName("createTime");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("deleteBy");

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isDelete")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("productId");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<string>("UnitName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("unitName");

                    b.HasKey("Id");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DeleteBy");

                    b.HasIndex("ProductId");

                    b.ToTable("UnitConversions");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.VariantValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("AttributeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("attributeId");

                    b.Property<string>("AttributeValueName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreateBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("createBy");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("date")
                        .HasColumnName("createTime");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("deleteBy");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("DeleteBy");

                    b.HasIndex("ProductId");

                    b.ToTable("VariantValues");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.Token.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Expriaton")
                        .HasColumnType("datetime")
                        .HasColumnName("expriaton");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductBatch", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.SupermarketEntities.Batch", null)
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductBatches_Batches");

                    b.HasOne("Supermarket.Domain.Entities.SupermarketEntities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductBatches_Products");
                });

            modelBuilder.Entity("ProductCategory", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.SupermarketEntities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_productCategories_Categories");

                    b.HasOne("Supermarket.Domain.Entities.SupermarketEntities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_productCategories_Products");
                });

            modelBuilder.Entity("ProductCoupon", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.SupermarketEntities.Coupon", null)
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCoupons_Coupons");

                    b.HasOne("Supermarket.Domain.Entities.SupermarketEntities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductCoupons_Products");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.Common.Modification", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "AppUsers")
                        .WithMany("Modifications")
                        .HasForeignKey("ModifiedBy");

                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Attribute", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserCreate")
                        .WithMany("CreateAttributes")
                        .HasForeignKey("CreateBy")
                        .HasConstraintName("FK_Attributes_AppUsers_Create");

                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserDelete")
                        .WithMany("DeleteAttributes")
                        .HasForeignKey("DeleteBy")
                        .HasConstraintName("FK_Attributes_AppUsers_Delete");

                    b.Navigation("UserCreate");

                    b.Navigation("UserDelete");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Batch", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserCreate")
                        .WithMany("CreateBatches")
                        .HasForeignKey("CreateBy")
                        .HasConstraintName("FK_Batches_AppUsers_Create");

                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserDelete")
                        .WithMany("DeleteBatches")
                        .HasForeignKey("DeleteBy")
                        .HasConstraintName("FK_Batches_AppUsers_Delete");

                    b.Navigation("UserCreate");

                    b.Navigation("UserDelete");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Category", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserCreate")
                        .WithMany("CreateCategories")
                        .HasForeignKey("CreateBy")
                        .HasConstraintName("FK_Categories_AppUsers_Create");

                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserDelete")
                        .WithMany("DeleteCategories")
                        .HasForeignKey("DeleteBy")
                        .HasConstraintName("FK_Categories_AppUsers_Delete");

                    b.HasOne("Supermarket.Domain.Entities.SupermarketEntities.Category", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Categories_Categories");

                    b.Navigation("Parent");

                    b.Navigation("UserCreate");

                    b.Navigation("UserDelete");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Coupon", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserCreate")
                        .WithMany("CreateCoupons")
                        .HasForeignKey("CreateBy")
                        .HasConstraintName("FK_Coupons_AppUsers_Create");

                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserDelete")
                        .WithMany("DeleteCoupons")
                        .HasForeignKey("DeleteBy")
                        .HasConstraintName("FK_Coupons_AppUsers_Delete");

                    b.Navigation("UserCreate");

                    b.Navigation("UserDelete");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Customer", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserCreate")
                        .WithMany("CreateCustomers")
                        .HasForeignKey("CreateBy")
                        .HasConstraintName("FK_Customers_AppUsers_Create");

                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserDelete")
                        .WithMany("DeleteCustomers")
                        .HasForeignKey("DeleteBy")
                        .HasConstraintName("FK_Customers_AppUsers_Delete");

                    b.HasOne("Supermarket.Domain.Entities.SupermarketEntities.MemberShipType", "MembershipType")
                        .WithMany("Customers")
                        .HasForeignKey("MembershipTypeId")
                        .HasConstraintName("FK_Customers_membershipType");

                    b.Navigation("MembershipType");

                    b.Navigation("UserCreate");

                    b.Navigation("UserDelete");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Employee", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "AppUser")
                        .WithOne("Employee")
                        .HasForeignKey("Supermarket.Domain.Entities.SupermarketEntities.Employee", "UserId")
                        .HasConstraintName("FK_Employees_AppUsers");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Invoice", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserCreate")
                        .WithMany("CreateInvoices")
                        .HasForeignKey("CreateBy")
                        .HasConstraintName("FK_Invoices_AppUsers_Create");

                    b.HasOne("Supermarket.Domain.Entities.SupermarketEntities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Invoices_Customers");

                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserDelete")
                        .WithMany("DeleteInvoices")
                        .HasForeignKey("DeleteBy")
                        .HasConstraintName("FK_Invoices_AppUsers_Delete");

                    b.Navigation("Customer");

                    b.Navigation("UserCreate");

                    b.Navigation("UserDelete");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.InvoiceDetail", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserCreate")
                        .WithMany("CreateInvoicesDetails")
                        .HasForeignKey("CreateBy")
                        .HasConstraintName("FK_InvoicesDetails_AppUsers_Create");

                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserDelete")
                        .WithMany("DeleteInvoicesDetails")
                        .HasForeignKey("DeleteBy")
                        .HasConstraintName("FK_InvoicesDetails_AppUsers_Delete");

                    b.HasOne("Supermarket.Domain.Entities.SupermarketEntities.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceDetails_Invoices");

                    b.HasOne("Supermarket.Domain.Entities.SupermarketEntities.Product", "Product")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_InvoiceDetails_Products");

                    b.Navigation("Invoice");

                    b.Navigation("Product");

                    b.Navigation("UserCreate");

                    b.Navigation("UserDelete");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.MemberShipType", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserCreate")
                        .WithMany("CreateMemberShipTypes")
                        .HasForeignKey("CreateBy")
                        .HasConstraintName("FK_MemberShipTypes_AppUsers_Create");

                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserDelete")
                        .WithMany("DeleteMemberShipTypes")
                        .HasForeignKey("DeleteBy")
                        .HasConstraintName("FK_MemberShipTypes_AppUsers_Delete");

                    b.Navigation("UserCreate");

                    b.Navigation("UserDelete");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Product", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserCreate")
                        .WithMany("CreateProducts")
                        .HasForeignKey("CreateBy")
                        .HasConstraintName("FK_Products_AppUsers_Create");

                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserDelete")
                        .WithMany("DeleteProducts")
                        .HasForeignKey("DeleteBy")
                        .HasConstraintName("FK_Products_AppUsers_Delete");

                    b.HasOne("Supermarket.Domain.Entities.SupermarketEntities.Product", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Product_Product");

                    b.Navigation("Parent");

                    b.Navigation("UserCreate");

                    b.Navigation("UserDelete");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.StockIn", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserCreate")
                        .WithMany("CreateStockIns")
                        .HasForeignKey("CreateBy")
                        .HasConstraintName("FK_StockIns_AppUsers_Create");

                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserDelete")
                        .WithMany("DeleteStockIns")
                        .HasForeignKey("DeleteBy")
                        .HasConstraintName("FK_StockIns_AppUsers_Delete");

                    b.HasOne("Supermarket.Domain.Entities.SupermarketEntities.Supplier", "Supplier")
                        .WithMany("StockIns")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_StockIns_Suppliers");

                    b.Navigation("Supplier");

                    b.Navigation("UserCreate");

                    b.Navigation("UserDelete");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.StockInDetail", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserCreate")
                        .WithMany("CreateStockInsDetails")
                        .HasForeignKey("CreateBy")
                        .HasConstraintName("FK_StockInsDetails_AppUsers_Create");

                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserDelete")
                        .WithMany("DeleteStockInsDetails")
                        .HasForeignKey("DeleteBy")
                        .HasConstraintName("FK_StockInsDetails_AppUsers_Delete");

                    b.HasOne("Supermarket.Domain.Entities.SupermarketEntities.Product", "Product")
                        .WithMany("StockInDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_StockInDetails_Products");

                    b.HasOne("Supermarket.Domain.Entities.SupermarketEntities.StockIn", "StockIn")
                        .WithMany("StockInDetails")
                        .HasForeignKey("StockInId")
                        .HasConstraintName("FK_StockInDetails_StockIns");

                    b.Navigation("Product");

                    b.Navigation("StockIn");

                    b.Navigation("UserCreate");

                    b.Navigation("UserDelete");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Supplier", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserCreate")
                        .WithMany("CreateSuppliers")
                        .HasForeignKey("CreateBy")
                        .HasConstraintName("FK_Suppliers_AppUsers_Create");

                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserDelete")
                        .WithMany("DeleteSuppliers")
                        .HasForeignKey("DeleteBy")
                        .HasConstraintName("FK_Suppliers_AppUsers_Delete");

                    b.Navigation("UserCreate");

                    b.Navigation("UserDelete");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.UnitConversion", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserCreate")
                        .WithMany("CreateUnitConversions")
                        .HasForeignKey("CreateBy")
                        .HasConstraintName("FK_UnitConversions_AppUsers_Create");

                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserDelete")
                        .WithMany("DeleteUnitConversions")
                        .HasForeignKey("DeleteBy")
                        .HasConstraintName("FK_UnitConversions_AppUsers_Delete");

                    b.HasOne("Supermarket.Domain.Entities.SupermarketEntities.Product", "Product")
                        .WithMany("UnitConversions")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_UnitConversions_Products");

                    b.Navigation("Product");

                    b.Navigation("UserCreate");

                    b.Navigation("UserDelete");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.VariantValue", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.SupermarketEntities.Attribute", "Attribute")
                        .WithMany("AttributeValues")
                        .HasForeignKey("AttributeId")
                        .HasConstraintName("FK_VariantValue_Attributes");

                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserCreate")
                        .WithMany("CreateVariantValues")
                        .HasForeignKey("CreateBy")
                        .HasConstraintName("FK_VariantValues_AppUsers_Create");

                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "UserDelete")
                        .WithMany("DeleteVariantValues")
                        .HasForeignKey("DeleteBy")
                        .HasConstraintName("FK_VariantValues_AppUsers_Delete");

                    b.HasOne("Supermarket.Domain.Entities.SupermarketEntities.Product", "Product")
                        .WithMany("VariantValues")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_VariantValue_Product");

                    b.Navigation("Attribute");

                    b.Navigation("Product");

                    b.Navigation("UserCreate");

                    b.Navigation("UserDelete");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.Token.RefreshToken", b =>
                {
                    b.HasOne("Supermarket.Domain.Entities.Identity.AppUser", "AppUser")
                        .WithOne("RefreshToken")
                        .HasForeignKey("Supermarket.Domain.Entities.Token.RefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("CreateAttributes");

                    b.Navigation("CreateBatches");

                    b.Navigation("CreateCategories");

                    b.Navigation("CreateCoupons");

                    b.Navigation("CreateCustomers");

                    b.Navigation("CreateInvoices");

                    b.Navigation("CreateInvoicesDetails");

                    b.Navigation("CreateMemberShipTypes");

                    b.Navigation("CreateProducts");

                    b.Navigation("CreateStockIns");

                    b.Navigation("CreateStockInsDetails");

                    b.Navigation("CreateSuppliers");

                    b.Navigation("CreateUnitConversions");

                    b.Navigation("CreateVariantValues");

                    b.Navigation("DeleteAttributes");

                    b.Navigation("DeleteBatches");

                    b.Navigation("DeleteCategories");

                    b.Navigation("DeleteCoupons");

                    b.Navigation("DeleteCustomers");

                    b.Navigation("DeleteInvoices");

                    b.Navigation("DeleteInvoicesDetails");

                    b.Navigation("DeleteMemberShipTypes");

                    b.Navigation("DeleteProducts");

                    b.Navigation("DeleteStockIns");

                    b.Navigation("DeleteStockInsDetails");

                    b.Navigation("DeleteSuppliers");

                    b.Navigation("DeleteUnitConversions");

                    b.Navigation("DeleteVariantValues");

                    b.Navigation("Employee")
                        .IsRequired();

                    b.Navigation("Modifications");

                    b.Navigation("RefreshToken")
                        .IsRequired();
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Attribute", b =>
                {
                    b.Navigation("AttributeValues");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Category", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.MemberShipType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Product", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("StockInDetails");

                    b.Navigation("UnitConversions");

                    b.Navigation("VariantValues");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.StockIn", b =>
                {
                    b.Navigation("StockInDetails");
                });

            modelBuilder.Entity("Supermarket.Domain.Entities.SupermarketEntities.Supplier", b =>
                {
                    b.Navigation("StockIns");
                });
#pragma warning restore 612, 618
        }
    }
}
